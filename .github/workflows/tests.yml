name: CI

on:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y lua5.3 liblua5.3-dev luarocks nodejs
          sudo luarocks install busted
      - name: Lua syntax check
        id: lua
        continue-on-error: true
        run: |
          set -o pipefail

          quote_attr() {
            python3 - "$1" <<'PY'
import sys
from xml.sax.saxutils import quoteattr
print(quoteattr(sys.argv[1]))
PY
          }

          escape_xml() {
            python3 - <<'PY'
import sys
from xml.sax.saxutils import escape
print(escape(sys.stdin.read()), end='')
PY
          }

          mkdir -p reports
          report="reports/lua.xml"
          tmp_body=$(mktemp)

          mapfile -d '' -t files < <(find . -path './.beamng' -prune -o -name '*.lua' -print0)

          count=${#files[@]}
          errors=0

          if [ "$count" -eq 0 ]; then
            echo 'No Lua files'
          else
            echo 'Lua files:'
            printf '%s\n' "${files[@]}"
          fi

          : > "$tmp_body"
          for file in "${files[@]}"; do
            rel="${file#./}"
            quoted_name=$(quote_attr "$rel")
            if output=$(luac -p "$file" 2>&1); then
              printf '  <testcase classname="lua.syntax" name=%s></testcase>\n' "$quoted_name" >> "$tmp_body"
            else
              errors=$((errors+1))
              printf 'Lua syntax error in %s\n' "$file"
              failure_text=$(printf '%s' "$output" | escape_xml)
              printf '  <testcase classname="lua.syntax" name=%s><failure message="Syntax error">%s</failure></testcase>\n' "$quoted_name" "$failure_text" >> "$tmp_body"
            fi
          done

          {
            echo '<?xml version="1.0" encoding="UTF-8"?>'
            printf '<testsuite name="Lua syntax" tests="%s" failures="%s">\n' "$count" "$errors"
            cat "$tmp_body"
            echo '</testsuite>'
          } > "$report"

          rm -f "$tmp_body"

          if [ "$count" -gt 0 ]; then
            files_output=$(printf '%s\n' "${files[@]}")
          else
            files_output=""
          fi

          printf 'count=%s\n' "$count" >> "$GITHUB_OUTPUT"
          printf 'errors=%s\n' "$errors" >> "$GITHUB_OUTPUT"
          printf 'files<<EOF\n%s\nEOF\n' "$files_output" >> "$GITHUB_OUTPUT"

          if [ "$errors" -ne 0 ]; then exit 1; fi
      - name: JS syntax check
        id: js
        continue-on-error: true
        run: |
          set -o pipefail

          quote_attr() {
            python3 - "$1" <<'PY'
import sys
from xml.sax.saxutils import quoteattr
print(quoteattr(sys.argv[1]))
PY
          }

          escape_xml() {
            python3 - <<'PY'
import sys
from xml.sax.saxutils import escape
print(escape(sys.stdin.read()), end='')
PY
          }

          mkdir -p reports
          report="reports/js.xml"
          tmp_body=$(mktemp)

          mapfile -d '' -t files < <(find . -path './.beamng' -prune -o -name '*.js' -print0)

          count=${#files[@]}
          errors=0

          if [ "$count" -eq 0 ]; then
            echo 'No JavaScript files'
          else
            echo 'JS files:'
            printf '%s\n' "${files[@]}"
          fi

          : > "$tmp_body"
          for file in "${files[@]}"; do
            rel="${file#./}"
            quoted_name=$(quote_attr "$rel")
            if output=$(node --check "$file" 2>&1); then
              printf '  <testcase classname="js.syntax" name=%s></testcase>\n' "$quoted_name" >> "$tmp_body"
            else
              errors=$((errors+1))
              printf 'JavaScript syntax error in %s\n' "$file"
              failure_text=$(printf '%s' "$output" | escape_xml)
              printf '  <testcase classname="js.syntax" name=%s><failure message="Syntax error">%s</failure></testcase>\n' "$quoted_name" "$failure_text" >> "$tmp_body"
            fi
          done

          {
            echo '<?xml version="1.0" encoding="UTF-8"?>'
            printf '<testsuite name="JS syntax" tests="%s" failures="%s">\n' "$count" "$errors"
            cat "$tmp_body"
            echo '</testsuite>'
          } > "$report"

          rm -f "$tmp_body"

          if [ "$count" -gt 0 ]; then
            files_output=$(printf '%s\n' "${files[@]}")
          else
            files_output=""
          fi

          printf 'count=%s\n' "$count" >> "$GITHUB_OUTPUT"
          printf 'errors=%s\n' "$errors" >> "$GITHUB_OUTPUT"
          printf 'files<<EOF\n%s\nEOF\n' "$files_output" >> "$GITHUB_OUTPUT"

          if [ "$errors" -ne 0 ]; then exit 1; fi
      - name: Busted tests
        id: busted
        continue-on-error: true
        run: |
          set -o pipefail

          mkdir -p reports
          report="reports/busted.xml"

          busted --output=junit | tee "$report"
          status=${PIPESTATUS[0]}

          summary_present=1
          total=0
          successes=0
          failures=0
          errors=0
          pending=0

          if [ -s "$report" ]; then
            if counts=$(python3 - "$report" <<'PY'
import sys
from xml.etree import ElementTree as ET

path = sys.argv[1]
try:
    tree = ET.parse(path)
except Exception:
    sys.exit(1)
root = tree.getroot()
if root.tag == 'testsuites':
    suites = root.findall('testsuite')
else:
    suites = [root]
def to_int(value):
    try:
        return int(value)
    except (TypeError, ValueError):
        return 0
tests = sum(to_int(s.get('tests')) for s in suites)
failures = sum(to_int(s.get('failures')) for s in suites)
errors = sum(to_int(s.get('errors')) for s in suites)
skip = None
for attr in ('skipped', 'skip'):
    values = [to_int(s.get(attr)) for s in suites if s.get(attr) is not None]
    if values:
        skip = sum(values)
        break
if skip is None:
    skip = 0
successes = tests - failures - errors - skip
if successes < 0:
    successes = 0
print(tests)
print(successes)
print(failures)
print(errors)
print(skip)
PY
); then
              mapfile -t parsed <<EOF
$counts
EOF
              if [ "${#parsed[@]}" -eq 5 ]; then
                total=${parsed[0]}
                successes=${parsed[1]}
                failures=${parsed[2]}
                errors=${parsed[3]}
                pending=${parsed[4]}
              else
                summary_present=0
              fi
            else
              summary_present=0
            fi
          else
            summary_present=0
          fi

          if [ "$summary_present" -eq 1 ]; then
            printf 'Busted totals: %s tests, %s successes, %s failures, %s errors, %s pending\n' "$total" "$successes" "$failures" "$errors" "$pending"
          else
            echo 'Unable to parse Busted JUnit report' >&2
          fi

          printf 'total=%s\n' "$total" >> "$GITHUB_OUTPUT"
          printf 'successes=%s\n' "$successes" >> "$GITHUB_OUTPUT"
          printf 'failures=%s\n' "$failures" >> "$GITHUB_OUTPUT"
          printf 'errors=%s\n' "$errors" >> "$GITHUB_OUTPUT"
          printf 'pending=%s\n' "$pending" >> "$GITHUB_OUTPUT"
          printf 'summary_present=%s\n' "$summary_present" >> "$GITHUB_OUTPUT"
          printf 'status=%s\n' "$status" >> "$GITHUB_OUTPUT"

          exit "$status"
      - name: Report results
        id: report
        if: always()
        env:
          LUA_OUTCOME: ${{ steps.lua.outcome }}
          LUA_COUNT: ${{ steps.lua.outputs.count }}
          LUA_ERRORS: ${{ steps.lua.outputs.errors }}
          LUA_FILES: ${{ steps.lua.outputs.files }}
          JS_OUTCOME: ${{ steps.js.outcome }}
          JS_COUNT: ${{ steps.js.outputs.count }}
          JS_ERRORS: ${{ steps.js.outputs.errors }}
          JS_FILES: ${{ steps.js.outputs.files }}
          BUSTED_OUTCOME: ${{ steps.busted.outcome }}
          BUSTED_TOTAL: ${{ steps.busted.outputs.total }}
          BUSTED_SUCCESS: ${{ steps.busted.outputs.successes }}
          BUSTED_FAILURES: ${{ steps.busted.outputs.failures }}
          BUSTED_ERRORS: ${{ steps.busted.outputs.errors }}
          BUSTED_PENDING: ${{ steps.busted.outputs.pending }}
          BUSTED_SUMMARY_PRESENT: ${{ steps.busted.outputs.summary_present }}
          BUSTED_STATUS: ${{ steps.busted.outputs.status }}
        run: |
          LUA_COUNT=${LUA_COUNT:-0}
          LUA_ERRORS=${LUA_ERRORS:-0}
          JS_COUNT=${JS_COUNT:-0}
          JS_ERRORS=${JS_ERRORS:-0}
          BUSTED_TOTAL=${BUSTED_TOTAL:-0}
          BUSTED_SUCCESS=${BUSTED_SUCCESS:-0}
          BUSTED_FAILURES=${BUSTED_FAILURES:-0}
          BUSTED_ERRORS=${BUSTED_ERRORS:-0}
          BUSTED_PENDING=${BUSTED_PENDING:-0}
          BUSTED_STATUS=${BUSTED_STATUS:-0}
          BUSTED_SUMMARY_PRESENT=${BUSTED_SUMMARY_PRESENT:-1}
          if [ "$BUSTED_SUMMARY_PRESENT" -eq 0 ] && [ $((BUSTED_FAILURES + BUSTED_ERRORS)) -eq 0 ]; then
            BUSTED_ERRORS=$((BUSTED_ERRORS + 1))
          fi
          total_success=$((BUSTED_SUCCESS + LUA_COUNT - LUA_ERRORS + JS_COUNT - JS_ERRORS))
          total_fail=$((BUSTED_FAILURES + LUA_ERRORS + JS_ERRORS))
          total_error=$((BUSTED_ERRORS))

          summary_file=test-results.md
          badge_file=tests-badge.svg
          rm -f "$summary_file" "$badge_file"

          if [ $((total_fail + total_error)) -eq 0 ]; then
            badge_text="${total_success}%20passed"
            badge_color="success"
          else
            badge_text="$((total_fail + total_error))%20failed"
            badge_color="critical"
          fi
          badge_url="https://img.shields.io/badge/tests-${badge_text}-${badge_color}"

          {
            echo "## Test Summary"
            echo

            echo "### Lua syntax"
            if [ "$LUA_COUNT" -gt 0 ]; then
              echo "$LUA_FILES" | sed 's/^/- /'
            fi
            if [ "$LUA_OUTCOME" = "success" ]; then
              echo "✅ Checked $LUA_COUNT Lua files"
            else
              echo "❌ Syntax errors in $LUA_ERRORS Lua files out of $LUA_COUNT"
            fi

            echo
            echo "### JS syntax"
            if [ "$JS_COUNT" -gt 0 ]; then
              echo "$JS_FILES" | sed 's/^/- /'
            fi
            if [ "$JS_OUTCOME" = "success" ]; then
              echo "✅ Checked $JS_COUNT JS files"
            else
              echo "❌ Syntax errors in $JS_ERRORS JS files out of $JS_COUNT"
            fi

            echo
            echo "### Busted"
            if [ "$BUSTED_OUTCOME" = "success" ]; then
              echo "✅ Tests passed"
            else
              echo "❌ Tests failed"
              if [ "$BUSTED_SUMMARY_PRESENT" -eq 0 ]; then
                echo
                echo "Busted exited with status $BUSTED_STATUS before reporting test counts."
              fi
            fi
            echo "- Total: $BUSTED_TOTAL"
            echo "- Successes: $BUSTED_SUCCESS"
            echo "- Failures: $BUSTED_FAILURES"
            echo "- Errors: $BUSTED_ERRORS"

            echo
            echo "### Overall"
            echo "- Successes: $total_success"
            echo "- Failures: $total_fail"
            echo "- Errors: $total_error"

            echo
            echo "![Tests](${badge_url})"
          } | tee "$summary_file"
          curl -L "$badge_url" -o "$badge_file"
          cat "$summary_file" >> "$GITHUB_STEP_SUMMARY"

          printf 'summary<<EOF\n%s\nEOF\n' "$(cat "$summary_file")" >> "$GITHUB_OUTPUT"
          printf 'total_success=%s\n' "$total_success" >> "$GITHUB_OUTPUT"
          printf 'total_fail=%s\n' "$total_fail" >> "$GITHUB_OUTPUT"
          printf 'total_error=%s\n' "$total_error" >> "$GITHUB_OUTPUT"

      - name: Publish test report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Test results
          path: reports/*.xml
          reporter: junit
          fail-on-error: false

      - name: Upload report artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: |
            test-results.md
            tests-badge.svg
            reports/*.xml

      - name: Annotate check name
        if: always()
        uses: actions/github-script@v7
        env:
          TOT_SUCCESS: ${{ steps.report.outputs.total_success }}
          TOT_FAIL: ${{ steps.report.outputs.total_fail }}
          TOT_ERROR: ${{ steps.report.outputs.total_error }}
          SUMMARY: ${{ steps.report.outputs.summary }}
        with:
          script: |
            const {owner, repo} = context.repo;
            const sha = context.sha;
            const {data} = await github.rest.checks.listForRef({owner, repo, ref: sha});
            const baseName = `${context.workflow} / ${context.job}`;
            const check = data.check_runs.find(r => r.name.startsWith(baseName));
            if (check) {
              const suffix = `Successes: ${process.env.TOT_SUCCESS} | Failures: ${process.env.TOT_FAIL} | Errors: ${process.env.TOT_ERROR}`;
              const newName = `${baseName} (${context.eventName}) ${suffix}`;
              await github.rest.checks.update({
                owner, repo, check_run_id: check.id,
                name: newName,
                output: {title: suffix, summary: process.env.SUMMARY}
              });
            }

      - name: Fail if needed
        if: always()
        env:
          TOT_FAIL: ${{ steps.report.outputs.total_fail }}
          TOT_ERROR: ${{ steps.report.outputs.total_error }}
          LUA_OUTCOME: ${{ steps.lua.outcome }}
          JS_OUTCOME: ${{ steps.js.outcome }}
          BUSTED_OUTCOME: ${{ steps.busted.outcome }}
          BUSTED_STATUS: ${{ steps.busted.outputs.status }}
        run: |
          TOT_FAIL=${TOT_FAIL:-0}
          TOT_ERROR=${TOT_ERROR:-0}
          BUSTED_STATUS=${BUSTED_STATUS:-0}
          if [ "$LUA_OUTCOME" != "success" ] || [ "$JS_OUTCOME" != "success" ] || [ "$BUSTED_OUTCOME" != "success" ]; then
            exit 1
          fi
          if [ "$BUSTED_STATUS" -ne 0 ]; then
            exit 1
          fi
          if [ $((TOT_FAIL + TOT_ERROR)) -ne 0 ]; then
            exit 1
          fi

